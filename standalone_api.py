from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import pandas as pd
from prophet import Prophet
import json
import os
import sys
from typing import List, Dict, Any

app = FastAPI(
    title="Prophet Forecast API",
    description="Simple API for Prophet forecasting",
    version="0.1.0",
)

# Set up CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows all origins for development
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def root():
    return {"message": "Welcome to the Prophet Forecast API"}

@app.get("/api/v1/forecasts/prophet/forecast", response_model=List[Dict[str, Any]])
def get_prophet_forecast():
    """
    Get forecast generated by Prophet
    """
    try:
        # Path to the forecast JSON file
        forecast_path = "data/forecast.json"
        
        # Check if forecast file exists
        if not os.path.exists(forecast_path):
            # If not, generate it
            input_csv = "data/cleaned_data.csv"
            
            # Check if input CSV exists
            if not os.path.exists(input_csv):
                raise HTTPException(
                    status_code=404,
                    detail="Cleaned data CSV not found. Please run data_loader.py first."
                )
            
            # Read the CSV
            df = pd.read_csv(input_csv)
            
            # Filter for 'Actual sales'
            df_actual_sales = df[df["type"] == "Actual sales"].copy()
            
            # Prepare DataFrame for Prophet
            df_actual_sales["ds"] = pd.to_datetime(df_actual_sales["date"])
            df_actual_sales["y"] = df_actual_sales["value"]
            
            # Train Prophet model
            model = Prophet()
            model.fit(df_actual_sales)
            
            # Create future DataFrame for 12 months
            future = model.make_future_dataframe(periods=12, freq='M')
            
            # Forecast
            forecast = model.predict(future)
            
            # Extract relevant columns and convert to JSON
            forecast_output = forecast[["ds", "yhat"]].copy()
            forecast_output["ds"] = forecast_output["ds"].dt.strftime("%Y-%m-%d")
            
            # Save to JSON
            with open(forecast_path, "w") as f:
                json.dump(forecast_output.to_dict(orient="records"), f, indent=4)
        
        # Read the forecast from the JSON file
        with open(forecast_path, "r") as f:
            forecast_data = json.load(f)
        
        return forecast_data
    
    except Exception as e:
        print(f"Error getting Prophet forecast: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to get Prophet forecast: {str(e)}"
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("standalone_api:app", host="0.0.0.0", port=8000, reload=True)

