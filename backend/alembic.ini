# A generic Alembic configuration file.

[alembic]
# path to migration scripts
script_location = alembic

# template for migration file names, e.g. "%%(rev)s_%%(slug)s.py"
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library.
# Any required timezone name can be used, such as UTC, US/Eastern,
# Europe/Berlin.
# If None, the system default timezone is used.
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to true to run the environment during
# the process of generating a revision file, as well as ensuring
# that the environment.py module is importable
# revision_environment = false

# set to true to prevent "autogenerate" from creating
# new revision files if no changes are detected.
# requires Alembic version 1.7.0 or greater.
# check_for_existing_autogenerate = false

# Whether or not to output the Alembic version to stdout when
# running commands
# output_encoding = utf-8

s sqlalchemy.url = driver://user:pass@localhost/dbname
# The database URL is typically sourced from the application settings or environment variables
# It will be set dynamically in the env.py script
sqlalchemy.url = postgresql://user:password@host:port/database


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision files.
#
# The format is a named hook, followed by options.
# The only currently supported option is "type=exec".
#
# exec
#   execute a script.
#   The script is executed via subprocess.run(), and the following
#   variables are passed via environment variables:
#     ALEMBIC_REVISION - the revision string
#     ALEMBIC_MESSAGE - the message string
#     ALEMBIC_SCRIPT_LOCATION - the script location
#     ALEMBIC_CONFIG - the path to the alembic.ini file
#     ALEMBIC_COMMAND_ARGS - the command line arguments passed to the
#                            alembic command
#
# hooks = myhook
# myhook.type = exec
# myhook.executable = /path/to/executable --my-options
# myhook.cwd = /path/to/working/directory
# myhook.verbose = true


# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname = 

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S

